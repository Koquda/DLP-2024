' Generated with VGen 2.0.0

@startuml

class Position {
    +int getLine()
    +int getColumn()
    +boolean lessThan(Position other)
    +boolean greaterThan(Position other)
}

interface AST {
    +updatePositions(Object... children)
    +updatePositions(Position start, Position end)
    +Object accept(Visitor visitor, Object param)
}

AST *-[#404040,thickness=1]- Position : start >
AST *-[#404040,thickness=1]- Position : end >


interface Expression {
	..<color:#3366cc> TypeChecking </color>..
	+<color:#3366cc>boolean lvalue</color>
}
AST <|-[#808080]- Expression
Expression -[#3366cc,thickness=3]-  Type #text:3366cc : type >

interface Statement {
}
AST <|-[#808080]- Statement
Statement -[#3366cc,thickness=3]-  FunctionDefinition #text:3366cc : functionDefinition >

interface Definition {
}
AST <|-[#808080]- Definition

interface Type {
}
AST <|-[#808080]- Type

interface AST {
}

class Program {
}
AST <|-[#808080]- Program
Program o-[#404040,thickness=2]- "✱" Definition : definitions >

class VarDefinition {
	+String name
	..<color:#ff6600> Identification </color>..
	+<color:#ff6600>int scope</color>
	..<color:#669900> MemoryAllocation </color>..
	+<color:#669900>int offset</color>
}
Definition <|-[#808080]- VarDefinition
VarDefinition o-[#404040,thickness=2]-  Type : type >

class StructDefinition {
	+String name
}
Definition <|-[#808080]- StructDefinition
StructDefinition o-[#404040,thickness=2]- "✱" StructField : structFields >

class FunctionDefinition {
	+String name
	..<color:#669900> MemoryAllocation </color>..
	+<color:#669900>int bytesLocals</color>
}
Definition <|-[#808080]- FunctionDefinition
FunctionDefinition o-[#404040,thickness=2]- "✱" VarDefinition : varDefinitions >
FunctionDefinition o-[#404040,thickness=2]-  Type : type >
FunctionDefinition o-[#404040,thickness=2]- "✱" Definition : definitions >
FunctionDefinition o-[#404040,thickness=2]- "✱" Statement : statements >

class StructField {
	+String name
	..<color:#669900> MemoryAllocation </color>..
	+<color:#669900>int offset</color>
}
AST <|-[#808080]- StructField
StructField o-[#404040,thickness=2]-  Type : type >

class Assignment {
}
Statement <|-[#808080]- Assignment
Assignment o-[#404040,thickness=2]-  Expression : left >
Assignment o-[#404040,thickness=2]-  Expression : right >

class FunctionCallStatement {
	+String name
}
Statement <|-[#808080]- FunctionCallStatement
FunctionCallStatement o-[#404040,thickness=2]- "✱" Expression : expressions >

class If {
}
Statement <|-[#808080]- If
If o-[#404040,thickness=2]-  Expression : condition >
If o-[#404040,thickness=2]- "✱" Statement : ifBody >
If o-[#404040,thickness=2]- "✱" Statement : elseBody >

class While {
}
Statement <|-[#808080]- While
While o-[#404040,thickness=2]-  Expression : condition >
While o-[#404040,thickness=2]- "✱" Statement : statements >

class Read {
}
Statement <|-[#808080]- Read
Read o-[#404040,thickness=2]-  Expression : expression >

class Print {
	+String lexema
}
Statement <|-[#808080]- Print
Print o-[#404040,thickness=2]- "✱" Expression : expressions >

class Return {
}
Statement <|-[#808080]- Return
Return o-[#404040,thickness=2]- "0..1" Expression : expression >

class IntLiteral {
	+int value
}
Expression <|-[#808080]- IntLiteral

class FloatLiteral {
	+float value
}
Expression <|-[#808080]- FloatLiteral

class CharLiteral {
	+String value
}
Expression <|-[#808080]- CharLiteral

class Variable {
	+String name
}
Expression <|-[#808080]- Variable
Variable -[#ff6600,thickness=3]-  VarDefinition #text:ff6600 : varDefinition >

class Arithmetic {
	+String operator
}
Expression <|-[#808080]- Arithmetic
Arithmetic o-[#404040,thickness=2]-  Expression : left >
Arithmetic o-[#404040,thickness=2]-  Expression : right >

class ArithmeticComparison {
	+String operator
}
Expression <|-[#808080]- ArithmeticComparison
ArithmeticComparison o-[#404040,thickness=2]-  Expression : left >
ArithmeticComparison o-[#404040,thickness=2]-  Expression : right >

class LogicalComparison {
	+String operator
}
Expression <|-[#808080]- LogicalComparison
LogicalComparison o-[#404040,thickness=2]-  Expression : left >
LogicalComparison o-[#404040,thickness=2]-  Expression : right >

class Negation {
}
Expression <|-[#808080]- Negation
Negation o-[#404040,thickness=2]-  Expression : expression >

class FunctionCallExpression {
	+String name
}
Expression <|-[#808080]- FunctionCallExpression
FunctionCallExpression o-[#404040,thickness=2]- "✱" Expression : expressions >
FunctionCallExpression -[#ff6600,thickness=3]-  FunctionDefinition #text:ff6600 : functionDefinition >

class StructAccess {
	+String field
}
Expression <|-[#808080]- StructAccess
StructAccess o-[#404040,thickness=2]-  Expression : expression >
StructAccess -[#3366cc,thickness=3]-  StructField #text:3366cc : structField >

class Cast {
}
Expression <|-[#808080]- Cast
Cast o-[#404040,thickness=2]-  Type : castType >
Cast o-[#404040,thickness=2]-  Expression : expression >

class ArrayAccess {
}
Expression <|-[#808080]- ArrayAccess
ArrayAccess o-[#404040,thickness=2]-  Expression : left >
ArrayAccess o-[#404040,thickness=2]-  Expression : right >

class IntType {
}
Type <|-[#808080]- IntType

class FloatType {
}
Type <|-[#808080]- FloatType

class CharType {
}
Type <|-[#808080]- CharType

class VarType {
	+String name
}
Type <|-[#808080]- VarType

class ArrayType {
	+int size
}
Type <|-[#808080]- ArrayType
ArrayType o-[#404040,thickness=2]-  Type : type >

class StructType {
	+String name
}
Type <|-[#808080]- StructType
StructType -[#ff6600,thickness=3]-  StructDefinition #text:ff6600 : structDefinition >

class VoidType {
}
Type <|-[#808080]- VoidType

class ErrorType {
}
Type <|-[#808080]- ErrorType

@enduml
